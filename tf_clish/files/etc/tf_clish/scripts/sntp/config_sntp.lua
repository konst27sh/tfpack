#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 6/3/24 2:26 AM
---

local tf    = require "tf_module"
local utils = require "tf_utilities"
local sntpInfo = {}

local bool_enum = {
    ["0"] = "disable",
    ["1"] = "enable"
}


local function get_sntp_info()
    local cmd = "ubus call uci get '{\"config\":\"system\"}'"
    sntpInfo = tf.collectJsonTable(cmd)
    if sntpInfo == nil or sntpInfo.values == nil then
        print("critical: sntp data not valid")
        return "error"
    end
    sntpInfo = sntpInfo.values
    return "ok"
end

local function set_state()
    local value = tonumber(arg[2])
    if value == nil then
        return 2
    end
    local cmd = ""
    cmd = "uci set system.ntp.enabled=" .. value
    local res = os.execute(cmd)
    return res
end

local function change_server(operation)
    local res = 1001
    if arg[2] == nil or arg[2] == "" then
        print("critical: sntp value not valid")
        return 1
    end
    if get_sntp_info() == "error" then
        return
    end
    local value = arg[2]
    local sntp_server = {}
    local sntp_server_buffer = {}
    local cmd = ""
    if sntpInfo.ntp.enabled == "0" then
        print("error: SNTP serves is disabled")
        return 1
    end

    if sntpInfo.ntp.server == nil then
        print("error: TIME server not found")
        return 1
    end

    sntp_server = sntpInfo.ntp.server
    local count = 0
    for _, host_name in pairs(sntpInfo.ntp.server) do
        if operation == "delete" then
            if host_name ~= value then
                table.insert(sntp_server_buffer, host_name)
            elseif host_name == value then
                count = count + 1
            end
        elseif operation == "add" then
            table.insert(sntp_server_buffer, host_name)
            if host_name == value then
                count = count + 1
            end
        end
    end

    if operation == "add" then
        if count == 0 then
            table.insert(sntp_server_buffer, value)
        else
            print("info: NTP server is present")
            return 1
        end
    elseif operation == "delete" then
        if count == 0 then
            print("error:  NTP server " .. value .. " not found")
            return 1
        end
    end
    cmd = "uci del system.ntp.server"
    res = os.execute(cmd)
    if res ~= 0 then
        return res
    end
    if sntp_server_buffer ~= nil then
        for _, host_name in pairs(sntp_server_buffer) do
            cmd = "uci add_list system.ntp.server=" .. host_name
            res = os.execute(cmd)
        end
    end
    return res
end

local function set_timezone()
    local TimeZonevalue = arg[2]
    local cmdZoneName = "'Etc/GMT"
    local cmdTimeZone = "'<"
    local setZoneName = ""
    local setTimeZone = ""
    local timeZone = tonumber(TimeZonevalue)
    if timeZone == nil then
        return 2
    end
    if tonumber(TimeZonevalue) < 0 then
        local number = tonumber(TimeZonevalue) * -1
        setZoneName = "system.tfortis.zonename=" .. cmdZoneName .. TimeZonevalue .. "'"
        setTimeZone = "system.tfortis.timezone=" .. cmdTimeZone

        if number < 10 then
            setTimeZone = setTimeZone .. "-0" .. number .. ">'" .. number
        else
            setTimeZone = setTimeZone .. "-" .. number .. ">'" .. number
        end
    else
        setZoneName = "system.tfortis.zonename=" .. cmdZoneName .. "+" .. TimeZonevalue .. "'"
        setTimeZone = "system.tfortis.timezone=" .. cmdTimeZone

        if tonumber(TimeZonevalue) < 10 then
            setTimeZone = setTimeZone .. "+0" .. TimeZonevalue .. ">'" .. "-" .. TimeZonevalue
        else
            setTimeZone = setTimeZone .. "+" .. TimeZonevalue .. ">'" .. "-" .. TimeZonevalue
        end
    end
    local cmd = "uci set " .. setZoneName
    local timeZone_res = os.execute(cmd)
    cmd = "uci set " .. setTimeZone
    timeZone_res = os.execute(cmd)
    return timeZone_res
end

local function ntp_synchronize()

    if get_sntp_info() == "error" then
        return 1
    end
    if sntpInfo.ntp.enabled == "0" then
        print("error: SNTP serves is disabled")
        return 1
    end

    local sntp_servers = sntpInfo.ntp["server"]
    local ping_res = false
    for i, s in pairs(sntp_servers) do
        ping_res = utils.icmp_ping(s)
        if ping_res then
            break
        end
    end
    if not ping_res then
        print("ntp servers not accessible")
        return 2
    end
    local ntp_synchronize_res = ""
    local cmd_ntp_synchronize = "ubus call luci setInitAction '{\"name\":\"sysntpd\", \"action\":\"restart\"}'"
    local ntp_synchronize_info = tf.collectJsonTable(cmd_ntp_synchronize)
    if ntp_synchronize_info == nil and ntp_synchronize_info["result"] == nil then
        print("critical: can not synchronize time with NTP servers")
        return 2
    end
    ntp_synchronize_res = ntp_synchronize_info["result"]
    if ntp_synchronize_res then
        return 0
    end
    return 1
end

local sntp_cmdList =
{
    ["state"]       = { func = set_state },
    ["add"]         = { func = change_server },
    ["delete"]      = { func = change_server },
    ["timezone"]    = { func = set_timezone },
    ["synchronize"] = { func = ntp_synchronize },
}

local function run_config_sntp()
    if #arg < 2 then
        print("critical: sntp command not valid")
        return
    end

    local cmd_type = arg[1]
    local value = arg[2]
    if cmd_type == "state" then
        value = bool_enum[value]
    elseif cmd_type == "synchronize" then
        value = ""
    end
    if sntp_cmdList[cmd_type] == nil then
        print("critical: sntp command not valid")
        return
    end
    local res_sntp = sntp_cmdList[cmd_type].func(cmd_type)
    if res_sntp > 1 then
        print("critical: operation " .. cmd_type .. " " .. value .. " failed")
    elseif res_sntp == 0 then
        print("info: operation " .. cmd_type .. " " .. value .. " successful!")
    end
end

run_config_sntp()






