---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 2/25/25 4:55 PM
---

package.path = "/etc/tf_clish/scripts/tools/?.lua;" .. package.path

local tf = require "tf_module"
local lfs = require "lfs"
local trf = require "transfer_file_module"

local backup_module = {}

backup_module.configs = {
    "8021x",
    "collectd",
    "dropbear",
    "https",
    "lldpd",
    "log",
    "luci",
    "luci_snmpd",
    "mactelnet",
    "mstpd",
    "network",
    "nginx",
    "ntpclient",
    "openssl",
    "poe",
    "port",
    "port-mirroring",
    "qos",
    "radius",
    "rpcd",
    "rsyslog",
    "smtp",
    "snmpd",
    "syslog",
    "system",
    "tf_autorestart",
    "tf_device_monitor",
    "tfortis_io",
    "tfortis_ups",
    "ubootenv",
    "ucitrack",
    "udpxy",
    "uhttpd"
}

local function processFiles(inputPath, outputPath)
    local inputFile = io.open(inputPath, "r")
    if not inputFile then
        print("error: can not open config file")
        return 1
    end

    local outputFile = io.open(outputPath, "w")
    if not outputFile then
        print("error: can not temp config file")
        inputFile:close()
        return 1
    end

    local uniquePaths = {}
    local count = 0
    for line in inputFile:lines() do
        local trimmedLine = line:match("^%s*(.-)%s*$")
        if #trimmedLine > 0 then
            local fileAttr = lfs.attributes(trimmedLine)
            if fileAttr and fileAttr.mode == "file" then
                if not uniquePaths[trimmedLine] then
                    count = count + 1
                    uniquePaths[trimmedLine] = true
                    outputFile:write(trimmedLine .. "\n")
                end
            end
        end
    end
    inputFile:close()
    outputFile:close()
    if count == 0 then
        return 2
    end
    return 0
end

function backup_module.checkChanges()
    local cmd_changes = "ubus call uci changes"
    local res_changes = tf.collectJsonTable(cmd_changes)
    if res_changes ~= nil and res_changes["changes"] == nil then
        print("warning: There are unsaved settings changes in the system. You need to save \"changes save\" the changes or revert \"changes revert\".")
        return 1
    else
        return 0
    end
end

function backup_module.createTar_archive(file_s)
    local attr = lfs.attributes(file_s.path_dir)
    if attr == nil then
        local cmd_mkdir = "mkdir /tmp/backup"
        local res_mkdir = os.execute(cmd_mkdir)
        if res_mkdir ~= 0 then
            print("error: can not create directory for backup")
            return 2
        end
    end
    local res = processFiles("/etc/tf_sysupgrade.conf", "/tmp/tf_sysupgrade.conf")
    if res ~= 0 then
        return 1
    end
    local cmd_tar = "tar cvzf /tmp/backup/backup_file.tar.gz -T /tmp/tf_sysupgrade.conf 2>/dev/null"
    local backup_res = tf.executeCommand(cmd_tar)
    attr = lfs.attributes(file_s.path_dir .. file_s.file_name .. ".tar.gz")
    if attr ~= nil and attr.mode == "file" then
        local cmd_crypt = "ccrypt -e -K 123 " .. file_s.path_dir .. file_s.file_name .. ".tar.gz" .. " 2>/dev/null"
        local res_crypt = os.execute(cmd_crypt)
        if res_crypt ~= 0 then
            print("error: can crypt back up file")
            return 2
        end
        local cmd_mv = "mv " .. file_s.path_dir .. file_s.file_name .. ".tar.gz.cpt" .. " " .. file_s.path_dir .. file_s.file_name .. " 2>/dev/null"
        local mv_res = os.execute(cmd_mv)
        if mv_res ~= 0 then
            print("error: can not rename backup file")
            return 2
        else
            print("info: backup generated successfully")
            return 0
        end
    else
        print("error: no backup file")
        return 3
    end
end

return backup_module
