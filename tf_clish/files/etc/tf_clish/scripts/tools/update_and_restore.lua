#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 2/25/25 3:30 PM
---

package.path = "/etc/tf_clish/scripts/tools/?.lua;" .. package.path

local tf = require "tf_module"
local lfs = require "lfs"
local re = require "restore_module"
local trf = require "transfer_file_module"

local firmware_e = {
    ["show"]        = re.firmware_show,
    ["install"]     = re.firmware_install
}

local backup_e = {
    ["show"]        = re.backup_show,
    ["apply"]       = re.backup_apply_handler,
    ["generate"]    = re.backup_generate
}

local restore_e = {
    ["default"]     = re.restore_default,
    ["recovery"]    = re.restore_recovery
}

local function firmware_handler()
    if arg[2] ~= nil then
        local firmware_action = arg[2]
        if firmware_e[firmware_action] ~= nil then
            firmware_e[firmware_action]()
        else
            print("error: restore action is wrong")
        end
    else
        print("error: restore action is empty")
    end
end

local function backup_handler()
    if arg[2] ~= nil then
        local backup_action = arg[2]
        if backup_e[backup_action] ~= nil then
            local err = "error"
            local local_file_s = {}
            if trf.transfer_param["local_file"] ~= nil then
                local_file_s = trf.transfer_param["local_file"]
                if local_file_s ~= nil then
                    local_file_s = local_file_s["backup"]
                    err = "no_error"
                end
            end
            if err == "error" then
                print("critical: transfer module is wrong")
                return "error: transfer module is wrong"
            end
            backup_e[backup_action](local_file_s)
        else
            print("error: backup action is wrong")
        end
    else
        print("error: backup action is empty")
    end
end

local function restore_handler()
    if arg[2] ~= nil then
        local restore_action = arg[2]
        if restore_e[restore_action] ~= nil then
            restore_e[restore_action]()
        else
            print("error: restore action is wrong")
        end
    else
        print("error: restore action is empty")
    end
end

local update_and_restore_e = {
    ["firmware"]    = firmware_handler,
    ["backup"]      = backup_handler,
    ["restore"]     = restore_handler
}

local function update_and_restore_main()
    if arg[1] ~= nil then
        local action_type = arg[1]
        if update_and_restore_e[action_type] ~= nil then
            update_and_restore_e[action_type]()
        else
            print("error: config type is wrong")
        end
    else
        print("error: arg is wrong")
    end
end

update_and_restore_main()

