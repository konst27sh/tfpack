#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 2/21/25 11:03 AM
---

package.path = "/etc/tf_clish/scripts/tools/?.lua;" .. package.path

local tf = require "tf_module"
local trf = require "transfer_file_module"
local lfs = require "lfs"


local function sftp_handler(tr_param)
    print("info: This feature is under development")
end

local function tftp_handler(action, local_file, remote_file, host)
    local err = "error"
    local local_file_s = {}
    if trf.transfer_param["local_file"] ~= nil then
        local_file_s = trf.transfer_param["local_file"]
        if local_file_s[local_file] ~= nil then
            local_file_s = local_file_s[local_file]
            err = "no_error"
        end
    end
    if err == "error" then
        print("critical: transfer module is wrong")
        return "error: transfer module is wrong"
    end

    local valid_res = ""

    local localFileName  = local_file_s.file_name
    local remoteFileName = remote_file
    if action == "get" then
        remoteFileName = trf.check_remoteFilename(remote_file)
        if local_file == "certificate" then
            localFileName = remote_file
        end
    elseif action == "put" then
        if local_file == "backup" then
            localFileName = local_file_s.file_name
            local mv_res = trf.pre_copy_file(local_file_s, "mv", localFileName)
            if mv_res ~= "copy_ok" then
                return
            end
            remoteFileName = local_file_s.file_name
        elseif local_file == "log" then
        end
    end

    local copy_res = ""
    local res = trf.tftp_transfer(action, localFileName, remoteFileName, host, local_file_s)
    if res == "successful" then
        if action == "get" then
            copy_res = trf.post_copy_file(local_file_s, "mv", remote_file)
            if copy_res == "copy_ok" then
                if local_file == "firmware" then
                    local rs = require "restore_module"
                    valid_res = rs.validateImage(local_file_s)
                end
            end
        elseif action == "put" then
            local cmd_del = "rm " .. "/tmp/" .. local_file_s.file_name .. " 2>/dev/null"
            local res_rm = os.execute(cmd_del)
            if res_rm ~= 0 then
                print("error: can not delete tmp file")
            end
            cmd_del = "rm -r " .. local_file_s.path_dir .. " 2>/dev/null"
            res_rm = os.execute(cmd_del)
            if res_rm ~= 0 then
                print("error: can not delete backup dir")
            end
        end
    end
end

local tr_handler = {
    ["sftp"] = sftp_handler,
    ["tftp"] = tftp_handler
}

local function run_transfer_main()
    if arg[1] == nil then
        print("error: input arg is wrong")
        return
    end

    local tr_param = trf.transfer_param
    local tf_param_proto = tr_param["protocol"]

    local proto = arg[1]
    if tf_param_proto[proto] == nil then
        print("error: protocol name is wrong")
        return
    end

    if proto == "sftp" then
        if #arg ~= 7 then
            print("error: 1 arg is wrong")
            return
        end
    elseif proto == "tftp" then
        if #arg ~= 5 then
            print("error: 3 arg is wrong")
            return
        end
    end

    tr_handler[proto](arg[2], arg[3], arg[4], arg[5])
end

run_transfer_main()



