#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin
--- DateTime: 6/6/24 6:25 PM
---

local tf  = require "tf_module"
local lfs = require "lfs"


local rrm = {
    { name = "neighbor_report_tx",                      str = "\t\tneighbor report TX:          " }
}

local wnm = {
    { name = "bss_transition_query_rx",                 str = "\t\tbss transition query RX:     " },
    { name = "bss_transition_request_tx",               str = "\t\tbss transition request TX:   " },
    { name = "bss_transition_response_rx",              str = "\t\tbss transition response RX:  " },
}

local airtime = {
    { name = "time",                                    str = "\t\ttime:                        " },
    { name = "time_busy",                               str = "\t\ttime_busy:                   " },
    { name = "utilization",                             str = "\t\tutilization:                 " },
}

local dfs = {
    { name = "cac_seconds",                             str = "\t\tcac seconds:                 " },
    { name = "cac_active",                              str = "\t\tcac active:                  " },
    { name = "cac_seconds_left",                        str = "\t\tcac seconds left:            " },
}

local get_status_response =
{
    { name = "status",             struct = nil,        str = "\tstatus:                        " },
    { name = "bssid",              struct = nil,        str = "\tbssid:                         " },
    { name = "ssid",               struct = nil,        str = "\tssid:                          " },
    { name = "freq",               struct = nil,        str = "\tfrequency:                     " },
    { name = "channel",            struct = nil,        str = "\tchannel:                       " },
    { name = "op_class",           struct = nil,        str = "\top class:                      " },
    { name = "beacon_interval",    struct = nil,        str = "\tbeacon interval:               " },
    { name = "bss_color",          struct = nil,        str = "\tbss color:                     " },
    { name = "phy",                struct = nil,        str = "\tphy:                           " },
    { name = "rrm",                struct = rrm,        str = "\trrm:                           " },
    { name = "wnm",                struct = wnm,        str = "\twnm:                           " },
    { name = "airtime",            struct = airtime,    str = "\tairtime:                       " },
    { name = "dfs",                struct = dfs,        str = "\tdfs:                           " }
}

local clients = {
    { name = "",                                         str = "\t\t                         " },
}

local get_clients_response =
{
    { name = "freq",               struct = nil,        str = "\tfrequency:                      " },
    { name = "clients",            struct = clients,    str = "\tclients:                        " },
}

local function print_getStatus(radius_status_json, response)
    local value = ""
    for _, line in pairs(response) do
        if line.struct == nil then
            if radius_status_json[line.name] ~= nil then
                value = radius_status_json[line.name]
            elseif radius_status_json[line.name] == nil then
                value = "not defined"
            end
            print(line.str .. " " .. tostring(value))
        elseif line.struct ~= nil then
            local struct = line.struct
            local struct_json = radius_status_json[line.name]
            print(line.str)
            for _, subLine in pairs(struct) do
                if struct_json[subLine.name] ~= nil then
                    value = struct_json[subLine.name]
                elseif struct_json[subLine.name] == nil then
                    value = "not defined"
                end
                print(subLine.str .. " " .. tostring(value))
            end
        end
    end
end

local print_status =
{
    ["get_status"]  = get_status_response,
    ["get_clients"] = get_clients_response,
}

local function show_status()
    print("show status")
    local radius_status_json = ""
    local command = "get_status"
    if arg[3] ~= nil and arg[3] == "client" then
        command = "get_clients"
    end
    local portRange = arg[2]
    local ports = tf.checkPortRange(portRange)
    if ports ~= nil then
        if ports[3] == "once" or ports[3] == "range" then
            local portMin = tonumber(ports[1])
            local portMax = tonumber(ports[2])
            for i = portMin, portMax do
                local cmd = "ubus -S call hostapd.lan" .. i .. " " .. command
                radius_status_json = tf.collectJsonTable(cmd)
                print("Port: " .. i)
                if radius_status_json == nil then
                    print("\tdisabled")
                elseif type(radius_status_json) == "table" then
                    if print_status[command] ~= nil then
                        print_getStatus(radius_status_json, print_status[command])
                        --print_status[command](radius_status_json, get_status_response)
                    else
                        print("error: wrong command")
                    end
                end
            end
        else
            print("error: port range is wrong")
        end
    else
        print("error: port range is wrong")
    end
end

local general_enum =
{
    { name = "enable",                      str = "\tstate:                             " },
    { name = "eap_reauth_period",           str = "\teap reauth period:                 " },
    { name = "auth_server_addr",            str = "\tauth.      server addr:            " },
    { name = "auth_server_port",            str = "\tauth.      server port:            " },
    { name = "auth_server_shared_secret",   str = "\tauth.      server shared_secret:   " },
    { name = "acct_server_addr",            str = "\taccounting server addr:            " },
    { name = "acct_server_port",            str = "\taccounting server port:            " },
    { name = "acct_server_shared_secret",   str = "\taccounting server shared_secret:   " },
    { name = "ca_cert",                     str = "\tCA certificate:                    " },
    { name = "server_cert",                 str = "\tServer certificate:                " },
    { name = "private_key",                 str = "\tPrivate key:                       " },
}

local logs_enum =
{
    { name = "logger_syslog_level",         str = "\tsyslog level:                       " },
}

local logs_level =
{
    ["0"] = "Verbose debugging",
    ["1"] = "Debugging",
    ["2"] = "Informational",
    ["3"] = "Notification",
    ["4"] = 'Warning',
}

local interface_enum =
{
    ["0"] = "disable",
    ["1"] = "enable"
}

local config_type =
{
    ["general"]     = { name = "general",   struct = general_enum },
    ["logs"]        = { name = "logs",      struct = logs_enum },
    ["interface"]   = { name = "interface", struct = nil }
}

local function getNumber(str)
    return tonumber(str:match("%d+"))
end

local function show_configuration()
    local radiusConfig_error = "ok"
    local config = ""
    local ubus_radiusConfig_cmd = "ubus call uci get '{\"config\":\"8021x\"}'"
    local radiusConfig_json = tf.collectJsonTable(ubus_radiusConfig_cmd)
    if radiusConfig_json ~= nil then
        if radiusConfig_json["values"] ~= nil then
            radiusConfig_json = radiusConfig_json["values"]
            if arg[2] == nil or arg[2] == "all" then
                config = "all"
            else
                config = arg[2]
            end
            if config == "general" or config == "all" then
                print("General: ")
                local config_line = config_type["general"]
                for _, section in pairs(radiusConfig_json) do
                    if section[".type"] == "general" then
                        for _, param in pairs(config_line.struct) do
                            if section[param.name] ~= nil then
                                local value = ""
                                if param.name == "ca_cert" or param.name == "server_cert" or param.name == "private_key" then
                                    local attr = lfs.attributes(section[param.name])
                                    if attr ~= nil then
                                        local r_dir = "/etc/radius/"
                                        for filename in lfs.dir(r_dir) do
                                            if filename ~= "." and filename ~= ".." then
                                                local fullPath = r_dir .. filename
                                                if fullPath == section[param.name] then
                                                    attr = lfs.attributes(fullPath)
                                                    if attr.mode == "file" then
                                                        value = filename
                                                    end
                                                end
                                            end
                                        end
                                    end
                                else
                                    value = section[param.name]
                                end
                                print(param.str .. value)
                            else
                                print(param.str .. "not set")
                            end
                        end
                    end
                end
                print("LOG: ")
                config_line = config_type["logs"]
                for _, section in pairs(radiusConfig_json) do
                    if section[".type"] == "logs" then
                        for _, param in pairs(config_line.struct) do
                            if section[param.name] ~= nil then
                                local value = section[param.name]
                                value = logs_level[value]
                                print(param.str .. value)
                            else
                                print(param.str .. "not set")
                            end
                        end
                    end
                end
            end
            if config == "ports" or config == "all" then
                local ports_list = {}
                local port_table = {}
                local ifname = ""
                local value  = ""
                print("Ports: ")
                for _, section in pairs(radiusConfig_json) do
                    if section[".type"] == "interface" then
                        if section["ifname"] ~= nil and section["enable"] ~= nil then
                            ifname = section["ifname"]
                            value  = section["enable"]
                            value = interface_enum[value]
                            port_table[ifname] = value
                            table.insert(ports_list, ifname)
                            table.sort(ports_list, function(a, b)
                                local numA = getNumber(a)
                                local numB = getNumber(b)
                                return numA < numB
                            end)
                        else
                            ifname = "lan "
                            value  = "not configured"
                        end
                    end
                end
                for _, v in ipairs(ports_list) do
                    local p = v:gsub("lan", "port ")
                    print("\t" .. p .. "\t\t" .. port_table[v])
                end
            end
        else
            radiusConfig_error = "null"
        end
    else
        radiusConfig_error = "null"
    end

    if radiusConfig_error == "null" then
        print("error: Radius configuration is wrong")
    end
end

local function show_certificate()
    local attr = {}
    local directory = "/etc/radius"
    attr = lfs.attributes(directory)
    if attr == nil then
        print("error: no directory with certificate")
    elseif attr.mode == "directory" then
        print("Radius certificates:")
        for filename in lfs.dir(directory) do
            if filename ~= "." and filename ~= ".." then
                local fullPath = directory .. '/' .. filename
                attr = lfs.attributes(fullPath)
                if attr.mode == "file" then
                    print("\t" .. filename)
                end
            end
        end
    end
end

local show_radius =
{
    ["status"] = show_status,
    ["configuration"] = show_configuration,
    ["certificate"] = show_certificate
}

local function run_show_radius()
    if arg[1] == nil and arg[1] == "" then
        print("error: command 1 is wrong")
        return
    end

    if arg[2] == nil and arg[2] == "" then
        print("error: command 2 is wrong")
        return
    end
    local param = arg[1]
    if show_radius[param] ~= nil then
        show_radius[param]()
    else
        print("error: command is wrong")
    end
end

run_show_radius()
