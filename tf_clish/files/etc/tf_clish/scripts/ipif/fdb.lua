#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 7/24/24 5:04 PM
---

local tf = require "tf_module"
local br = require "bridge_module"
local util = require "tf_utilities"

local arpList =
{
    { "ip",      "\tIP address:      " },
    { "mac",     "\tMAC address:     " },
    { "device",  "\tDevice:          " }
}

local function run_fdb(ports)
    local fdb_table = {}
    local fdb_strInfo = br.options["fdb"]("no")
    local mac_status_json = tf.decodeToJson(fdb_strInfo)
    if mac_status_json ~= nil then
        if mac_status_json ~= nil then
            for i = tonumber(ports[1]), tonumber(ports[2]) do
                local count = 1
                print("Port: " .. i .. "  ---------------------------------")
                for _, fdb_struct in pairs(mac_status_json) do
                    if fdb_struct["vlan"] ~= nil then
                        local port = fdb_struct["ifname"]
                        _, port = util.separateLettersAndNumbers(port)
                        --if tonumber(port) >= tonumber(ports[1]) and tonumber(port) <= tonumber(ports[2]) then
                        if i == port then
                            print(">>> " .. count)
                            --table.insert(fdb_table, fdb_struct)
                            count = count + 1
                            for name, str in pairs(br.fdb_params) do
                                if name ~= "ifname" then
                                    print(str .. fdb_struct[name])
                                end
                            end
                        end
                    end
                end
            end
        end
        return fdb_table
    end
end

local function run_arp(port)
    local arp = require "arp_module"
    local arp_strInfo = arp.getJson()
    local arp_jsonInfo = tf.decodeToJson(arp_strInfo)
    if arp_jsonInfo ~= nil then
        for _, list in pairs(arp_jsonInfo) do
            for _, arp_row in pairs(arpList) do
                print(arp_row[2] .. list[arp_row[1]])
            end
        end
    else
        print("info: arp table not found")
    end
end

local function run_mian_net()
    if arg[1] == "arp" then
        run_arp(0)
    elseif arg[1] == "fdb" then
        local portRange = tf.checkPortRange(arg[2])
        local cmd = "ubus call uci get '{\"config\":\"network\", \"type\":\"device\", \"section\":\"switch\"}'"
        local portInfo = tf.collectJsonTable(cmd)
        local portsList = portInfo.values
        if portsList["ports"] ~= nil then
            portsList = portsList["ports"]
        end
        local fdb_tables = run_fdb(portRange)
        if fdb_tables ~= nil then
            --for _, port in pairs(portsList) do
                --local _, portNum = util.separateLettersAndNumbers(port)
                --if tonumber(portNum) >= tonumber(portRange[1]) and tonumber(portNum) <= tonumber(portRange[2]) then
                --    for _, struct in pairs(fdb_tables) do
                --        local lan = struct["ifname"]
                --        local _, mac_porNum = util.separateLettersAndNumbers(lan)
                --        if mac_porNum == portNum then
                --            print("Port: " .. portNum .. "\t-----------------------------------------")
                --            for name, str in pairs(br.fdb_params) do
                --                if name ~= "ifname" then
                --                    print(str .. struct[name])
                --                end
                --            end
                --        end
                --    end
                --end
            --end
        end
    end
end

run_mian_net()



