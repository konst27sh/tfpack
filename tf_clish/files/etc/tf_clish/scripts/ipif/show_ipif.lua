#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 6/21/24 11:51 AM
---

local tf = require "tf_module"
local pm = require "print_module"
local br = require "bridge_module"

local function run_show_ipif()
    local interfaceList = tf.collectJsonTable("ubus call network.interface dump")
    if interfaceList == nil or interfaceList["interface"] == nil then
        return 1
    else
        interfaceList = interfaceList["interface"]
    end

    for _, if_table in pairs(interfaceList) do
        if if_table["interface"] ~= "loopback" then
            print(" -------------------------------------------------- ")
            print("Interface:\t" .. if_table["interface"])
            if if_table["device"] ~= nil then
                print(br.if_enum.device .. if_table["device"])
            end
            if if_table["proto"] ~= nil then
                print(br.if_enum.proto .. if_table["proto"])
            end
            if if_table["up"] ~= nil then
                local status = tostring(if_table["up"])
                print(br.if_enum.status .. tf.status_logic[status])
            end
            if if_table["uptime"] ~= nil then
                print(br.if_enum.uptime .. if_table["uptime"])
            end

            if if_table["ipv4-address"] ~= nil then
                local ipv4_m = if_table["ipv4-address"]
                print(br.if_enum.ipaddr)
                for _, ipv4_address in pairs(ipv4_m) do
                    if ipv4_address["address"] ~= nil then
                        print("\t\t\t" .. ipv4_address["address"] .. "/" .. ipv4_address["mask"])
                    end
                    --if ipv4_address["mask"] ~= nil then
                    --    print(if_enum.netmask .. ipv4_address["mask"])
                    --end
                end
            end

            if if_table["dns-server"] ~= nil and #if_table["dns-server"] > 0 then
                print("\tDNS:")
                print(br.if_enum.dns_server)
                for i, dns_server in pairs(if_table["dns-server"]) do
                    print("\t\t\t" .. dns_server)
                end
            end

            if if_table["dns-search"] ~= nil and #if_table["dns-search"] > 0 then
                print(br.if_enum.dns_search)
                for i, dns_search in pairs(if_table["dns-search"]) do
                    print("\t\t\t" .. dns_search)
                end
            end

            if if_table["route"] ~= nil and #if_table["route"] > 0 then
                print("\tRoute:")
                local route_m = if_table["route"]
                for _, route in pairs(route_m) do
                    print("\t\t" .. "-------------------------------")
                    if route["target"] ~= nil then
                        print(br.if_enum.target .. route["target"] .. "/" .. route["mask"])
                    end
                    if route["nexthop"] ~= nil then
                        print(br.if_enum.nexthope .. route["nexthop"])
                    end
                    if route["source"] ~= nil then
                        print(br.if_enum.source .. route["source"])
                    end
                end
            end
        end
    end
end

run_show_ipif()

