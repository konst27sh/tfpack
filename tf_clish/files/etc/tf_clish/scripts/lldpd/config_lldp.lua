#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin
--- DateTime: 6/6/24 12:43 PM
---
---

local tf = require "tf_module"

local portList_old = {
}


local cmd_get_lldp_config   = "ubus call uci get '{\"config\":\"lldpd\"}'"
local cmd_del_lldp_if       = "uci del lldpd.config.interface"
local cmd_add_lldp_port     = "uci add_list lldpd.config.interface="

local function set_enable_lldp(Value_in)
    local res_lldp_enable = 1001
    local cmd = "uci set lldpd.config.enable_lldp=" .. Value_in
    res_lldp_enable = os.execute(cmd)
    cmd = "uci set lldpd.config.force_lldp=" .. Value_in
    res_lldp_enable = os.execute(cmd)
    return res_lldp_enable
end

local function set_lldp_tx_interval(Value_in)
    local res_lld_ptx_interval = 1001
    local cmd = "uci set lldpd.config.lldp_tx_interval=" .. Value_in
    res_lld_ptx_interval = os.execute(cmd)
    return res_lld_ptx_interval
end

local function set_lldp_tx_hold(Value_in)
    local res_lldp_tx_hold = 1001
    local cmd = "uci set lldpd.config.lldp_tx_hold=" .. Value_in
    res_lldp_tx_hold = os.execute(cmd)
    return res_lldp_tx_hold
end

local function set_lldp_readonly_mode(Value_in)
    local res_lld_readonly_mode = 1001
    local cmd = "uci set lldpd.config.readonly_mode=" .. Value_in
    res_lld_readonly_mode = os.execute(cmd)
    return res_lld_readonly_mode
end

local function enable_lldp_Ports(status, portRange)
    local res_lld_enable_ports = 1001
    local min_port = tonumber(portRange[1])
    local max_port = tonumber(portRange[2])

    for port = min_port, max_port do
        local cmd = cmd_add_lldp_port .. "lan" .. port
        res_lld_enable_ports = os.execute(cmd)
    end

    if status == "if_not_empty" then
        for _, port_s in pairs(portList_old) do
            local cmd = ""
            if port_s.str == "switch" then
                port_s.str = port_s.str .. "."
                cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
            elseif port_s.str == "lan" then
                if port_s.port < min_port or port_s.port > max_port then
                    cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
                end
            else
                cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
            end
            res_lld_enable_ports = os.execute(cmd)
        end
    end
    return res_lld_enable_ports
end

local function disable_lldp_Ports(status, portRange)
    local res_lld_disable_ports = 1001
    local min_port = tonumber(portRange[1])
    local max_port = tonumber(portRange[2])
    if status == "if_not_empty" then
        for _, port_s in pairs(portList_old) do
            local cmd = ""
            if port_s.str == "switch" then
                port_s.str = port_s.str .. "."
                cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
            elseif port_s.str == "lan" then
                if port_s.port < min_port or port_s.port > max_port then
                    cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
                end
            else
                cmd = cmd_add_lldp_port .. port_s.str .. port_s.port
            end
            res_lld_disable_ports = os.execute(cmd)
        end
    end
    return res_lld_disable_ports
end

local cmd_statePort =
{
    enable  = enable_lldp_Ports,
    disable = disable_lldp_Ports
}

local function set_ports()
    local res_lldp_set_ports = 1001
    local portState = arg[3]
    local status = "if_not_empty"
    local portRange = tf.checkPortRange(arg[2])
    if portRange ~= nil and (portRange[3] == "range" or portRange[3] == "once") then
        local lldp_info = tf.collectJsonTable(cmd_get_lldp_config)
        if lldp_info["values"]["config"]["interface"] ~= nil then
            lldp_info = lldp_info["values"]["config"]["interface"]
            for i, portStr in pairs(lldp_info) do
                local port_s = {}
                local port, str = tf.getPort(portStr)
                port_s.str = str
                port_s.port = tonumber(port)
                table.insert(portList_old, port_s)
            end
            res_lldp_set_ports = os.execute(cmd_del_lldp_if)
        else
            status = "if_empty"
        end
        cmd_statePort[portState](status, portRange)
    else
        return 1
    end
    return res_lldp_set_ports
end

local lldp_cmdList =
{
    { cmd = "enable_lldp",      func = set_enable_lldp },
    { cmd = "lldp_tx_interval", func = set_lldp_tx_interval },
    { cmd = "lldp_tx_hold",     func = set_lldp_tx_hold },
    { cmd = "receive_only",     func = set_lldp_readonly_mode },
    { cmd = "ports",            func = set_ports },
}

local function run_config_lldp()
    for _, value in pairs(lldp_cmdList) do
        if arg[1] == value.cmd then
            local res_lldp = value.func(arg[3])
            if res_lldp ~= 0 then
                if arg[1] == "ports" then
                    print("critical: operation " .. arg[1] .. " " .. arg[3] .. " for ports " .. arg[2] .. "failed,  error = " .. res_lldp)
                else
                    print("critical: operation change " .. arg[1] .. " to " .. arg[3] .. " failed")
                end
            else
                if arg[1] == "ports" then
                    print("info: operation " .. arg[1] .. " " .. arg[3] .. " for ports " .. arg[2] .. " successful!")
                else
                    print("info: operation change " .. arg[1] .. " to " .. arg[3] .. " successful!")
                end
            end
            return
        end
    end
end

run_config_lldp()