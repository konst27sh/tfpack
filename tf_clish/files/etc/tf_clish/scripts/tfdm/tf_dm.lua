#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin
--- DateTime: 6/6/24 6:25 PM
---

local tf = require "tf_module"
local cmd_get_tfdm_config = "ubus call uci get '{\"config\":\"network\"}'"
local cmd_set_tfdm_state  = "ubus call uci set '{\"config\":\"network\", "
local cmd_set_tfdm_type = "\"type\":\"interface\", "

local tfdm_enum =
{
    ["0"] = "disable",
    ["1"] = "enable"
}


local function tfdm_config()
    local ifname_list = {}
    local state = ""
    if arg[2] == nil and arg[2] == "" then
        print("error: interface name not presented")
        return
    else
        if arg[2] == "lo" and arg[2] == "loopback" then
            print("error: This interface name is reserved")
        end
        ifname_list = tf.splitString(arg[2])
    end
    if arg[3] == nil and arg[3] == "" then
        print("error: interface state not presented")
        return
    else
        state = arg[3]
    end
    local tfdm_jsonInfo = tf.collectJsonTable(cmd_get_tfdm_config)
    if tfdm_jsonInfo["values"] ~= nil then
        tfdm_jsonInfo = tfdm_jsonInfo["values"]
        for _, ifname in pairs(ifname_list) do
            if tfdm_jsonInfo[ifname] == nil then
                print("error: interface *" .. ifname .. "* not presented")
            else
                local section = tfdm_jsonInfo[ifname]
                if section[".type"] == "interface" then
                    local cmd_section = "\"section\":\"" .. section[".name"] .. "\", "
                    local cmd_values  = "\"values\":{\"tfdm\":\"" .. state .. "\"}"
                    local cmd_set_tfdm = ""
                    cmd_set_tfdm = cmd_set_tfdm_state .. cmd_section .. cmd_set_tfdm_type .. cmd_values .. "}'"
                    tf.executeCommand(cmd_set_tfdm)
                else
                    print("error: *" .. ifname .. "* is not interface")
                end
            end
        end
    else
        print("error: config is wrong")
    end
end

local function tfdm_show()
    local tfdm_jsonInfo = tf.collectJsonTable(cmd_get_tfdm_config)
    local count = 1
    if tfdm_jsonInfo["values"] ~= nil then
        for _, section in pairs(tfdm_jsonInfo["values"]) do
            if section[".type"] == "interface" then
                if section[".name"] ~= "lo" and section[".name"] ~= "loopback" then
                    if section["tfdm"] ~= nil then
                        local state_value = tfdm_enum[section["tfdm"]]
                        print(count .. " -\t" .. section[".name"] .. "\t" .. state_value)
                    else
                        print(count .. " -\t" .. section[".name"] .. "\t" .. "not set")
                    end
                    count = count + 1
                end
            end
        end
    else
        print("error: config is wrong")
    end
end

local tfdm_cmdList =
{
    ["config"]  = tfdm_config,
    ["show"]    = tfdm_show
}

local function run_config_user()
    local cmd = arg[1]
    if tfdm_cmdList[cmd] ~= nil then
        tfdm_cmdList[cmd]()
    else
        print("error: tfdm wrong command")
    end
end

run_config_user()
