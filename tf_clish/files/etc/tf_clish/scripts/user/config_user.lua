#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin
--- DateTime: 6/6/24 6:25 PM
---

local tf = require "tf_module"

local cmd_get_user_config = "ubus call uci get '{\"config\":\"rpcd\"}'"
local cmd_add_user = "ubus call tf_system createUser '{\"username\":\""
local cmd_genHash = "ubus call tf_system generateHash '{\"username\":\""
local cmd_delete_user = "ubus call tf_system deleteUser '{\"username\":\""
local cmd_add_login = "ubus call uci add '{\"config\":\"rpcd\",\"type\":\"login\"}'"
local cmd_delete_section = "ubus call uci delete '{\"config\":\"rpcd\",\"section\":\""

local adminRule =
{
    full = "\"read\":[\"*\"], \"write\":[\"*\"]}}'",
    user = "\"read\":[\"*\"]}}'"
}

local user_info = {}

local function found_incoming_user()
    user_info = tf.collectJsonTable(cmd_get_user_config)
    if user_info == nil or user_info["values"] == nil then
        return "error"
    end
    user_info = user_info["values"]
    for _, list in pairs(user_info) do
        if list[".type"] ~= nil and list[".type"] == "login" then
            if list["username"] == arg[2] then
                return "found"
            end
        end
    end
    return "not_found"
end

local function add_user()
    local user_add_res = 1001
    local user_isFound = found_incoming_user()
    if user_isFound == "error" then
        print("critical: user config is wrong")
        return 1
    end
    if user_isFound == "found" then
        print("error: User *" .. arg[2] .. "* is present")
        return 1
    end
    local res = tf.collectJsonTable(cmd_add_login)
    local section = res["section"]

    local cmd_add = ""
    local cmd_hash = ""
    local cmd_config = ""
    local rule = arg[4]
    if arg[4] == "full" then
        cmd_add = cmd_add_user .. arg[2] .. "\", \"password\":\"" .. arg[3] .. "\", \"level\":\"" .. arg[4] .. "\"}'"
        cmd_hash = cmd_genHash .. arg[2] .. "\", \"password\":\"" .. arg[3] .. "\", \"level\":\"" .. arg[4] .. "\"}'"
        tf.executeCommand(cmd_add)
        local hash_value = tf.executeCommand(cmd_hash)
        hash_value = tf.decodeToJson(hash_value)
        if hash_value["result"] == nil then
            print("critical: can not create new user")
            return 1
        end
        hash_value = hash_value["result"]
        cmd_config = "ubus call uci set '{\"config\":\"rpcd\",\"type\":\"login\",\"section\":\"" .. section ..
            "\", \"values\":{\"username\":\"" .. arg[2] .. "\", \"password\":\"" .. "$p$" .. arg[2] .. "\", \"hash\":\"" .. hash_value .. "\"," .. adminRule[rule]     --tf.executeCommand(cmd_config)
        user_add_res = os.execute(cmd_config)
    elseif arg[4] == "user" then
        cmd_add = cmd_add_user .. arg[2] .. "\", \"password\":\"" .. arg[3] .. "\", \"level\":\"" .. arg[4] .. "\"}'"
        cmd_config = "ubus call uci set '{\"config\":\"rpcd\",\"type\":\"login\",\"section\":\"" .. section ..
            "\", \"values\":{\"username\":\"" .. arg[2] .. "\", \"password\":\"" .. "$p$" .. arg[2] .. "\"," .. adminRule[rule]
        tf.executeCommand(cmd_add)
        user_add_res = os.execute(cmd_config)
    end
    return user_add_res
end

local function delete_user()
    local cmd_config = ""
    local cmd_system = ""

    local user_isFound = found_incoming_user()
    if user_isFound == "error" then
        print("critical: user config is wrong")
        return 1
    end
    if user_isFound == "not_found" then
        print("error: User *" .. arg[2] .. "* not present")
        return 1
    end
    local status = "user_not_found"
    local count = 0
    for id, list in pairs(user_info) do
        if list[".type"] ~= nil and list[".type"] == "login" then
            if list["username"] == arg[2] then
                cmd_config = cmd_delete_section .. id .. "\"}'"
                cmd_system = cmd_delete_user .. arg[2] .. "\"}'"
                tf.executeCommand(cmd_config)
                tf.executeCommand(cmd_system)
                status = "user_found"
                count = count + 1
            end
        end
        if count > 1 then
            print("error: user *" .. arg[2] .. "* more then 1")
        end
    end

    return 0
end

local function writeLog(f_path, str)
    local file_path = "/tmp/my_file.txt"
    local text_to_write = "Привет! Это тестовая строка."

    -- Открываем файл для записи (или создаем новый)
    local file = io.open(f_path, "w")
    if not file then
        print("Не удалось открыть файл.")
    else
        -- Записываем строку в файл
        file:write(str)

        -- Закрываем файл после завершения работы
        file:close()
        print("Строка успешно записана в файл!")
    end
end


local function edit_user()
    writeLog("/tmp/edit.txt", "edit_user\n")
    local user_isFound = found_incoming_user()
    local str = "user_isFound = " .. user_isFound .. "\n"
    writeLog("/tmp/edit.txt", "edit_user --> user_isFound = " .. user_isFound)
    if user_isFound == "error" then
        print("critical: user config is wrong")
        return 1
    end
    if user_isFound == "not_found" then
        print("error: user " .. arg[2] .. " not presented")
        return 1
    end

    local cmd_hash = cmd_genHash .. arg[2] .. "\", \"password\":\"" .. arg[3] .. "\", \"level\":\"" .. arg[4] .. "\"}'"
    str = str .. "cmd_hash = " .. cmd_hash .. "\n"
    local hash_value = tf.executeCommand(cmd_hash)
    hash_value = tf.decodeToJson(hash_value)
    if hash_value["result"] == nil then
        print("critical: can not create new user")
        writeLog("/tmp/cmd_hash.txt", "critical: can not create new user")
        return 1
    end
    local user_add_res = 1001
    for id, list in pairs(user_info) do
        if list[".type"] ~= nil and list[".type"] == "login" then
            if list["username"] == arg[2] then
                hash_value = hash_value["result"]
                str = str .. "hash_value = " .. hash_value .. "\n"
                local cmd_config = "ubus call uci set '{\"config\":\"rpcd\",\"type\":\"login\",\"section\":\"" .. id .. "\", \"values\":{\"hash\":\"" .. hash_value .. "\"}}'"     --tf.executeCommand(cmd_config)
                str = str .. "cmd_config = " .. cmd_config .. "\n"
                user_add_res = os.execute(cmd_config)
            end
        end
    end
    str = str .. "user_add_res = " .. user_add_res .. "\n"
    writeLog("/tmp/edit_user.txt", str)
    return user_add_res
end

local usr_cmdList =
{
    { cmd = "add", func = add_user },
    { cmd = "delete", func = delete_user },
    { cmd = "edit", func = edit_user }
}

local function run_config_user()
    for _, value in pairs(usr_cmdList) do
        if arg[1] == value.cmd then
            local user_res = value.func(arg[3])
            if user_res == 0 then
                print("info: user " .. arg[2] .. " " .. arg[1] .. " successful!")
            end
        end
    end
end

run_config_user()
