#!/usr/bin/lua

---
--- Generated by Luanalysis
--- Created by sheverdin.
--- DateTime: 2/16/24 4:33 PM
---

package.path = "/etc/tf_clish/scripts/igmp/?.lua;" .. package.path

local tf            = require "tf_module"
local igmp          = require "igmp_module"
local util          = require "tf_utilities"
local br            = require "bridge_module"

local portRange = {}

local show_igmp_option =
{
    "status",
    "config"
}

local function igmp_show_status()
    local igmp_status_str = br.options["mdb"]("no")
    if igmp_status_str ~= nil then
        local igmp_status_json = tf.decodeToJson(igmp_status_str)
        if igmp_status_json ~= nil then
            for _, mdb_info in pairs(igmp_status_json) do
                for group, group_param in pairs(br.mdb_json) do
                    if group_param.struct ~= nil then
                        local mdb_data = mdb_info[group]
                        print(group_param.name)
                        for i, mdb_group in pairs(mdb_data) do
                            print(">>> " .. i .. "  ---------------------------------------------------")
                            for name, str in pairs(group_param.struct) do
                                if type(mdb_group[name]) ~= "table" then
                                    print(str .. mdb_group[name])
                                elseif type(mdb_group[name]) == "table" then
                                    print(str)
                                    for _, value in pairs(mdb_group[name]) do
                                        print("\t\t" .. value)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        else
            print("error: mdb table not corrected")
        end
    end
end

local function igmp_show_config()
    local config_type = ""
    if arg[2] ~= nil then
        config_type = arg[2]
    else
        print("error: config type is wrong")
        return
    end
    local ubus_cmd = "ubus call uci get '{\"config\":\"network\", \"type\":\"device\"}'"
    local igmpData_json = tf.collectJsonTable(ubus_cmd)

    if (igmpData_json == nil or igmpData_json["values"] == nil) then
        print("error: igmp config is wrong")
        return
    end
    igmpData_json = igmpData_json["values"]
    if config_type == "general" or config_type == "all" then
        print("IGMP global config:")
        if igmpData_json["switch"] == nil then
            print("error: switch config is wrong")
            return
        else
            local igmpData_json_global = igmpData_json["switch"]
            for _, struct in pairs(igmp.cmd_global) do
                local option = struct["option"]
                if igmpData_json_global[option] ~= nil then
                    print(struct["str"] .. igmpData_json_global[option])
                end
            end
        end
    end

    if config_type == "ports" or config_type == "all" then
        local res = {}
        local minPort = 0
        local maxPort = 100

        if arg[3] ~= nil then
            res = tf.checkPortRange(arg[3])
        end
        print("IGMP ports config:")
        if igmpData_json["switch"] == nil then
            print("error: switch config is wrong")
            return
        else
            local igmpData_json_global = igmpData_json["switch"]
            if igmpData_json_global["ports"] ~= nil then
                local ports = igmpData_json_global["ports"]
                if res ~= nil then
                    if res[3] == "once" or res[3] == "range" then
                        minPort = res[1]
                        maxPort = res[2]
                    end
                end
                for _, port in pairs(ports) do
                    local _, p = util.separateLettersAndNumbers(port)
                    if p >= minPort and p <= maxPort then
                        print("---------------------------------------------------------")
                        print("Port:" .. " " .. port)
                        for _, ports_config in pairs(igmpData_json) do
                            if port == ports_config["name"] then
                                for _, struct in pairs(igmp.cmd_ports) do
                                    local option = struct["option"]
                                    if ports_config[option] ~= nil then
                                        local value = ports_config[option]
                                        if igmp.igmp_state_digir2str[value] == nil then
                                            print("error: " .. struct["str"] .. " wrong value")
                                        else
                                            value = igmp.igmp_state_digir2str[value]
                                            print(struct["str"] .. value)
                                        end
                                    else
                                        print(struct["str"] .. "not set")
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end



end

local igmp_show_cmdList = {
    ["status"] = igmp_show_status,
    ["config"] = igmp_show_config,
}

local function main_show_igmp()
    if arg[1] ~= nil then
        igmp_show_cmdList[arg[1]]()
    else
        print("error: argument is wrong")
    end
end

main_show_igmp()

