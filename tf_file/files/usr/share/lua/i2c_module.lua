#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 4/11/24 9:48 AM
---

local tf = require "tf_module"

local i2c_module = {}

i2c_module.sfpList =
{
    { name = "portSfpVendor",       str = "vendor:             " },
    { name = "portSfpFiberTec",     str = "fiber tec:          " },
    { name = "portSfpPartNumber",   str = "part #:             " },
    { name = "portSfpRevision",     str = "revision:           " },
    { name = "portSfpPresent",      str = "present:            " },
    { name = "portSfpSignalDetect", str = "signal detect:      " },
    { name = "portSfpOui",          str = "oui:                " },
    { name = "portSfpIdentifier",   str = "id:                 " },
    { name = "portSfpConnector",    str = "connector:          " },
    { name = "portSfpLinkLen",      str = "link len:           " },
    { name = "portSfpType",         str = "type:               " },
    { name = "portSfpMedia",        str = "media:              " },
    { name = "portSfpSpeed",        str = "speed:              " },
    { name = "portSfpEncoding",     str = "encoding:           " },
    { name = "portSfpNBR",          str = "nbr:                " },
    { name = "portSfpLen9",         str = "len 9:              " },
    { name = "portSfpLen50",        str = "len 50:             " },
    { name = "portSfpLen62",        str = "len 62:             " },
    { name = "portSfpLenC",         str = "lenc:               " },
    { name = "portSfpTemperature",  str = "\tTechnical param: \n\t\ttemperature:        " },
    { name = "portSfpWavelen",      str = "\t\twavelen:            " },
    { name = "portSfpVoltage",      str = "\t\tvoltage             " },
    { name = "portSfpCurrent",      str = "\t\tcurrent:            " },
    { name = "portSfpBiasCurrent",  str = "\t\tbias current:       " },
    { name = "portSfpRxOutPower",   str = "\tPower:\n\t\trx out power [W]:   " },
    { name = "portSfpRxOutPowerDb", str = "\t\trx out power [dB]:  " },
    { name = "portSfpTxOutPower",   str = "\t\ttx out power [W]:   " },
    { name = "portSfpTxOutPowerDb", str = "\t\ttx out power [dB]:  " },
}

i2c_module.ups_list =
{
    { name = "RPS_SW_VERS",         str = "UPS parameters:\n\tSW version:          ", enumValue = nil },
    { name = "RPS_HW_VERS",         str = "\tHW version:          ", enumValue = nil },
    { name = "upsModeAvalible",     str = "\tmode:                ", enumValue = { "true", "false" } },
    { name = "upsPwrSource",        str = "\tpower source:        ", enumValue = { "battery", "AC" } },
    { name = "RPS_TEMPER",          str = "\temperature:          ", enumValue = nil },
    { name = "RPS_CHRG_VOLTAGE",    str = "\tcharging voltage:    ", enumValue = nil },
    { name = "upsBatteryVoltage",   str = "\tBattery:\n\t\tvoltage:     ", enumValue = nil },
    { name = "RPS_BAT_CURRENT",     str = "\t\tcurrent:     ", enumValue = nil },
    { name = "upsBatteryTime",      str = "\t\tlifetime:    ", enumValue = nil },
}

local inputList =
{
    state        = "\tstate:        ",
    alarm_state  = "\talarm state:  "
}

i2c_module.sensorList = {
    {name = "tamper",               name_str = "Tamper:",           msg = inputList },
    {name = "sensor1",              name_str = "Sensor 1:",         msg = inputList },
    {name = "sensor2",              name_str = "Sensor 2:",         msg = inputList },
    {name = "relay",                name_str = "Relay:",            msg = inputList },
    {name = "sensorConnected",      name_str = "Sensor connected",  msg = inputList },
    {name = "SHT_TYPE",             name_str = "SHT TYPE",          msg = inputList },
    {name = "sensorTemperature",    name_str = "Temperature",       msg = inputList },
    {name = "sensorHumidity",       name_str = "Humidity",          msg = inputList },
}

i2c_module.hw_sysEnum = {
    main        = nil,
    sensors     = i2c_module.sensorList,
    output		= nil,
    ups         = i2c_module.ups_list,
    sht         = nil,
    sfp1        = i2c_module.sfpList,
    sfp2        = i2c_module.sfpList,
    rtc         = nil,
    poe         = nil,
    system      = nil,
    autorestart = nil,
}

function i2c_module.showConfig(portNum)
    local resConfig = {}
    local cmd = ""
    if portNum == "all" then
        cmd = "ubus call uci get '{\"config\":\"tfortis_io\"}'"
    else
        cmd = "ubus call uci get '{\"config\":\"tfortis_io\", \"section\":\"" .. portNum .. "\"}'"
    end
    resConfig = tf.collectJsonTable(cmd)
    return resConfig
end

return i2c_module
