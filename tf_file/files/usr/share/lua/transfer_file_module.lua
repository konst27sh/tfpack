---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 2/21/25 10:59 AM
---

local transfer_file_module = {}
local tf = require "tf_module"
local lfs = require "lfs"

local protocol_e = {
    ["tftp"] = "",
    ["sftp"] = ""
}

local put_and_get = {
    ["put"] = "",
    ["get"] = ""
}

local put = {
    ["put"] = "",
}

local get = {
    ["get"] = "",
}

local action_e =
{
    ["put_and_get"] = put_and_get,
    ["put"] = put,
    ["get"] = get,
}

local local_file_e = {
    ["backup"]      = { action = put_and_get,   path_dir = "/tmp/backup/",       file_name = "backup_file" },
    ["log"]         = { action = put,           path_dir = "/tmp/log/",          file_name = "log_file" },
    ["certificate"] = { action = get,           path_dir = "/etc/radius/",       file_name = "certificate_file" },
    ["firmware"]    = { action = get,           path_dir = "/tmp/firmware/",     file_name = "firmware.bin" },
}

transfer_file_module.transfer_param = {
    ["protocol"]    = protocol_e,
    ["action"]      = action_e,
    ["local_file"]  = local_file_e,
    ["host"]        = "",
    ["remote_file"] = "",
    ["user_name"]   = "",
    ["password"]    = ""
}

transfer_file_module.image = {
    meta_file            = "/tmp/sysupgrade.meta",
    checksum_md5    = "",
    checksum_sha256 = "",
    size            = 0,
    allow_backup    = false,
    valid           = false
}

function transfer_file_module.check_remoteFilename(remote_file)
    local isfileName = remote_file:find("[\/:%*%?\"<>|] ")
    if isfileName then
        print("error: file name must be only word, without special symbols [, \\,  /, :, %, *, %, ?,\", <, >, |,]")
        return ""
    end
    return remote_file
end

function transfer_file_module.get_fileList(r_dir)
    local file_list = {}
    local attr = lfs.attributes(r_dir)
    if attr == nil then
        return nil
    end

    local ubus_file_cmd = "ubus call file list '{\"path\":\"" .. r_dir .. "\"}'"
    local fileList_json = tf.collectJsonTable(ubus_file_cmd)
    if fileList_json ~= nil and fileList_json["entries"] ~= nil then
        file_list = fileList_json["entries"]
    else
        return nil
    end

    return file_list
end

function transfer_file_module.get_image_md5(local_file)
    local local_file_s = {}
    if local_file_e[local_file] ~= nil then
        local_file_s = local_file_e[local_file]
    end

    local cmd_ubus_md5 = "ubus call file md5 '{\"path\":\"" .. local_file_s.path_dir .. local_file_s.file_name .. "\"}'"
    local md5_json = tf.collectJsonTable(cmd_ubus_md5)
    if md5_json ~= nil and md5_json["md5"] ~= nil then
        transfer_file_module.image.checksum_md5 = md5_json["md5"]
    end
    return md5_json["md5"]
end

function transfer_file_module.post_copy_file(file_s, action, remote_file)
    local cmd = ""
    local res = 1001

    local attr = lfs.attributes(file_s.path_dir)
    if attr == nil then
        cmd = "mkdir " .. file_s.path_dir .. " 2>/dev/null "
        res = os.execute(cmd)
    elseif attr.mode == "directory" then
        res = 0
    end

    if res ~= 0 then
        print("error: can not create folder")
        return res
    end

    local localFileName = file_s.file_name
    if file_s.file_name == "certificate_file" then
        localFileName = remote_file
    elseif file_s.file_name == "backup_file" then
        localFileName = localFileName
    end
    --print("localFileName = " .. localFileName)
    attr = lfs.attributes("/tmp/" .. localFileName)

    if attr ~= nil and attr.mode == "file" then
        local cmd_copy = action .. " " .. "/tmp/" .. localFileName .. " " .. file_s.path_dir .. localFileName .. " 2>/dev/null"
        local copy_res = os.execute(cmd_copy)
        if copy_res ~= 0 then
            print("\nerror: operation is failed. error:" .. copy_res)
            return "copy image is failed"
        else
            return "copy_ok"
        end
    else
        print("error: file " .. localFileName .. " not found")
    end
end

function transfer_file_module.pre_copy_file(file_s, action, local_file)
    local attr = lfs.attributes(file_s.path_dir .. local_file)
    if attr ~= nil and attr.mode == "file" then
        local cmd_copy = action .. " " .. file_s.path_dir .. local_file .. " /tmp/" .. local_file .. " 2>/dev/null"
        local copy_res = os.execute(cmd_copy)
        if copy_res ~= 0 then
            print("\nerror: operation is failed. error:" .. copy_res)
            return "copy_failed"
        else
            return "copy_ok"
        end
    else
        print("error: " .. file_s.file_name .. " file not found")
        return "not_found"
    end
end

function transfer_file_module.tftp_transfer(action, local_file, remote_file, host, file_s)
    local transfer_res = 1001
    local err = "error"

    if file_s["action"] ~= nil then
        local action_s = file_s["action"]
        if action_s[action] ~= nil then
            err = "no_error"
        end
    end

    if err == "error" then
        print("error: transfer module is wrong")
        return "error: transfer module is wrong"
    end

    local print_action = ""
    if action == "get" then
        print_action = "\nUploading file .............."
    elseif action == "put" then
        print_action = "\nDownloading file .............."
    end

    local tr_cmd = "atftp --" .. action .. " -l " .. local_file .. " -r " .. remote_file .. " " .. host .. " 2>/dev/null"
    --print("tr_cmd = " .. tr_cmd)
    local cmd = "cd " .. "/tmp" .. " && " .. tr_cmd

    print(print_action)
    transfer_res = os.execute(cmd)

    if transfer_res ~= 0 then
        print("error: file transfer failed. error: " .. transfer_res)
        return "failed"
    else
        print("info: operation is successful")
        return "successful"
    end
end

return transfer_file_module





