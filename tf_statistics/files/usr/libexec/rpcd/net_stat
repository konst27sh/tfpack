#!/usr/bin/env lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 10/6/24 10:12
---

local json          = require "luci.jsonc"
local tf            = require "tf_module"
local utils         = require "utils"

local methods = {
    getStatus = {
        args = { port = "String", param = "String" },
        call = function(f_args)
            local cmd = "ethtool  -S " .. f_args.port
            local text_stat = tf.executeCommand(cmd)
            local res = {}
            local lines = {}
            for line in text_stat:gmatch("[^\n]+") do
                table.insert(lines, line)
            end

            for i = 2, #lines do
                local key, value = lines[i]:match("%s+(%S+)%s*:%s*(%d+)")
                if key and value then
                    res[key] = value
                end
            end

            if f_args.param ~= nil and f_args.param ~= "" then
                local parameter = f_args.param
                res = res[parameter]
            end

            return
                {
                    nic_stat = res
                }, 0
        end
    }
}

local function parseInput()
    local parse = json.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(json.stringify({ error = err or "Incomplete input" }))
        os.exit(1)
    end

    return parse:get()
end

local function validateArgs(func, uargs)
    local method = methods[func]
    if not method then
        print(json.stringify({ error = "Method not found" }))
        os.exit(1)
    end

    if type(uargs) ~= "table" then
        print(json.stringify({ error = "1 Invalid arguments" }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local k, v
    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or
            (v ~= nil and type(v) ~= type(margs[k]))
        then
            print(json.stringify({ error = "2 Invalid arguments" }))
            os.exit(1)
        end
    end
    return method
end

if arg[1] == "list" then
    local _, method, rv = nil, nil, {}
    for _, method in pairs(methods) do
        rv[_] = method.args or {}
    end
    print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local result, code = method.call(args)
    print((json.stringify(result):gsub("^%[%]$", "{}")))
    --print(result)
    os.exit(code or 0)
end
