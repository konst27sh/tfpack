---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/11/24 4:58 PM
---

local snmp_status_ar = {}

local tf = require "tf_module"

require "bit"

local ar_errorCode = {
    { ERR_TEST_DISABLE, 0x00040, 5 },
    { ERR_TEST_LINK,    0x00004, 2 },
    { ERR_TEST_PING,    0x00008, 3 },
    { ERR_TEST_SPEED,   0x00010, 4 },
    { ERR_TIME_ALARM,   0x00020, 6 },
    { ERR_OK,           0x0,     1 },
}

local function snmp_getARerrorCode(mibObj, portNum)
    local arPoeStatus = {}
    local testType    = 0
    local status      = "OK"
    portNum           = tonumber(portNum)
    local jsonInfo = tf.collectJsonTable("tf_autorestart_ctrl status")
    local count  = 8
    if tonumber(portNum) > count then
        status = "over_index"
        return nil, status
    elseif tonumber(portNum) < 1 then
        status = "zero_index"
        return nil, status
    end
    arPoeStatus = jsonInfo.port[portNum]
    local res = ""
    if mibObj.name == "arPortIndex" then
        res = portNum
        return res, status
    end
    testType = tonumber(arPoeStatus.test_type) + 1
    local error_Code_in = arPoeStatus.error_Code
    local error_Code_local = tonumber(ar_errorCode[testType][2])
    local error_Code_link = tonumber(ar_errorCode[2][2])
    local error_Code_OK = tonumber(ar_errorCode[6][2])

    if (tonumber(bit.band(error_Code_in, error_Code_local)) == error_Code_local) then
        res = tostring(ar_errorCode[testType][3])
    elseif (tonumber(bit.band(error_Code_in, error_Code_link)) == error_Code_link) then
        res = tostring(ar_errorCode[2][3])
    elseif (tonumber(error_Code_in) == error_Code_OK) then
        res = tostring(ar_errorCode[6][3])
    end
    return res, status
end

snmp_status_ar.main =
{
    ["1.3.6.1.4.1.42019.3.2.2.6.1.1.1.1"] =
    {
        valueType = "INTEGER",
        nodetype = "column",
        oidLength = "8",
        ubusType = snmp_getARerrorCode,
        i2c_addr = "0",
        isZero = "no",
        name = "arPortIndex",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.6.1.1.1.2"
    },
    ["1.3.6.1.4.1.42019.3.2.2.6.1.1.1.2"] =
    {
        nodetype = "column",
        oidLength = "8",
        isEnum = "yes",
        enum  = {
            noLink = "2",
            normal = "1",
            noPing = "3",
            lowSpeed = "4",
        },
        i2c_addr = "0",
        valueType = "INTEGER",
        ubusType = snmp_getARerrorCode,
        name = "arPortStatus",
        isZero = "no",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.7.1.1.1"
    },
}

return snmp_status_ar

