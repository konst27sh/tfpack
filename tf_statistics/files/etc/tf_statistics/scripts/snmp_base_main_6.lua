---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/11/24 4:58 PM
---

local snmp_base_6 = {}
local tf = require "tf_module"
local i2c = require "i2c_module"

local shtEnum =
{
    ["0"] = "2",
    ["1"] = "1",
}

local function i2c_handler(mibObj, index)
    local jsonInfo
    local res = ""
    local name = ""
    local status = "OK"
    if mibObj.name == "inputState" or
        mibObj.name == "inputType" or
        mibObj.name == "inputAlarm" or
        mibObj.name == "inputIndex"
    then
        if tonumber(index) > 4 or tonumber(index) <= 0 then
            status = "over_index"
            res = nil
        else
            local sList = i2c.sensorList[tonumber(index)]
            name = sList.name
        end
    elseif mibObj.name == "relay" then
        if tonumber(index) > 1 then
            status = "over_index"
        else
            name = "relay"
        end
    else

        name = mibObj.name
    end

    if status == "OK" then
        if mibObj.name == "inputIndex" then
            res = index
        elseif mibObj.name == "inputType" or
                mibObj.name == "inputAlarm" or
                mibObj.name == "inputState" or
                mibObj.name == "relay" then
            if mibObj.name == "inputType" then
                res = tf.executeCommand("uci -q get tfortis_io." .. name .. ".type")
                if mibObj.enum ~= nil then
                    res = mibObj.enum[res]
                end
            elseif mibObj.name == "inputState" then
                jsonInfo = tf.getUbusDataByName(name)
                if jsonInfo == nil then
                    res = nil
                else
                    res = jsonInfo[name]
                    if (mibObj.isZero == "isZero") then
                        res = shtEnum[res]
                    end
                end
            elseif mibObj.name == "inputAlarm" then
                res = tf.executeCommand("uci -q get tfortis_io." .. name .. ".alarm_state")
                if (mibObj.isEnum == "yes") then
                    res = mibObj.enum[res]
                end
            elseif mibObj.name == "relay" then
                res = tf.executeCommand("uci -q get tfortis_io.relay.state")
                if (mibObj.isEnum == "yes") then
                    res = mibObj.enum[res]
                end
            end
        else
            jsonInfo = tf.getUbusDataByName(mibObj.name)
            if jsonInfo == nil and jsonInfo == "" then
                res = nil
            else
                res = jsonInfo[mibObj.name]
                if (mibObj.enum ~= nil) then
                    res = mibObj.enum[res]
                end
            end
        end
    end
    return res, status
end

local function ups_handler(mibObj, _)
    local res = ""
    local status = "OK"
    local jsonInfo = tf.getUbusDataByName(mibObj.name)
    if jsonInfo == nil and jsonInfo == "" then
        res = nil
    else
        res = jsonInfo[mibObj.name]
    end
    if mibObj.enum ~= nil then
        res = mibObj.enum[res]
    end
    return res, status
end


local function snmp_getFWVersion(_, index)
    local jsonInfo = {}
    local status = "OK"
    local res = ""
    if tonumber(index) > 1 then
        status = "over_index"
    else
        jsonInfo = tf.collectJsonTable("ubus call system board")
        local list = jsonInfo["release"]
        res = list["version"]
    end
    return res, status
end

local mib_6 =
{
    ["1.3.6.1.4.1.42019.3.2.1.4.1"] =
    {
        nodetype = "scalar",
        oidLength = "5",
        isEnum = "yes",
        enum  = {
            ["short\n"] = "2",
            ["open\n"] = "1",
        },
        i2c_addr = "0",
        valueType = "INTEGER",
        ubusType = i2c_handler,
        name = "relay",
        isZero = "no",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.1.1"
    },
    ["1.3.6.1.4.1.42019.3.2.2.1.1"] =
    {
        nodetype = "scalar",
        oidLength = "5",
        isEnum = "yes",
        enum  = {
            ["0"] = "2",
            ["1"] = "1",
        },
        i2c_addr = "0",
        valueType = "INTEGER",
        ubusType = ups_handler,
        name = "upsModeAvalible",
        isZero = "isZero",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.1.2"
    },
    ["1.3.6.1.4.1.42019.3.2.2.1.2"] =
    {
        nodetype = "scalar",
        oidLength = "5",
        isEnum = "yes",
        enum  = {
            ["0"] = "2",
            ["1"] = "1",
        },
        i2c_addr = "0",
        valueType = "INTEGER",
        ubusType = ups_handler,
        name = "upsPwrSource",
        isZero = "isZero",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.1.3"
    },
    ["1.3.6.1.4.1.42019.3.2.2.1.3"] =
    {
        valueType = "INTEGER",
        nodetype = "scalar",
        oidLength = "5",
        ubusType = ups_handler,
        i2c_addr = "0",
        isZero = "no",
        name = "upsBatteryVoltage",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.1.4"
    },
    ["1.3.6.1.4.1.42019.3.2.2.1.4"] =
    {
        valueType = "INTEGER",
        nodetype = "scalar",
        oidLength = "5",
        ubusType = ups_handler,
        i2c_addr = "0",
        isZero = "no",
        name = "upsBatteryTime",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.2.1.1.1"
        --next_oid = "1.3.6.1.4.1.42019.3.2.2.3.1"  -- todo need change
    },
    ["1.3.6.1.4.1.42019.3.2.2.3.1"] =
    {
        valueType = "STRING",
        nodetype = "scalar",
        oidLength = "5",
        ubusType = snmp_getFWVersion,
        i2c_addr = "0",
        isZero = "no",
        name = "fwVersion",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.5.1.1.1"
    },
    ["1.3.6.1.4.1.42019.3.2.2.8.1"] =
    {
        nodetype = "scalar",
        oidLength = "5",
        isEnum = "yes",
        enum  = {
            ["1"] = "1",
            ["0"] = "2",
        },
        i2c_addr = "0",
        valueType = "INTEGER",
        ubusType = i2c_handler,
        name = "sensorConnected",
        isZero = "isZero",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.8.2"
    },
    ["1.3.6.1.4.1.42019.3.2.2.8.2"] =
    {
        valueType = "INTEGER",
        nodetype = "scalar",
        oidLength = "5",
        ubusType = i2c_handler,
        i2c_addr = "0",
        isZero = "no",
        name = "sensorTemperature",
        next_oid = "1.3.6.1.4.1.42019.3.2.2.8.3"
    },
    ["1.3.6.1.4.1.42019.3.2.2.8.3"] =
    {
        valueType = "INTEGER",
        nodetype = "scalar",
        oidLength = "5",
        ubusType = i2c_handler,
        i2c_addr = "0",
        isZero = "no",
        name = "sensorHumidity",
        next_oid = "1.3.6.1.4.1.8072.3.2.10"
    },
}

snmp_base_6.main =
{
    nil,
    nil,
    nil,
    nil,
    mib_6
}

return snmp_base_6

